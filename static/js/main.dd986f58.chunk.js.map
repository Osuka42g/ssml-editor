{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["localStorageKey","intro","ButtonTagger","onClick","tag","closeTag","label","buttonsCollection","hotkeys","allHotkeys","map","e","flat","join","App","useState","localStorage","getItem","editorContent","setEditorContent","editor","useRef","surroundWith","text","surroundSelection","cursorStart","current","selectionStart","cursorEnd","selectionEnd","leftText","substring","middleText","rightText","length","className","keyName","onKeyDown","preventDefault","stopPropagation","filter","includes","bind","this","onKeyUp","_","allowRepeat","target","type","ref","value","onChange","setItem","rows","style","width","height","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd986f58.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport Hotkeys from 'react-hot-keys';\nimport './App.css';\n\nconst localStorageKey = 'SSML_WIP';\nconst intro = 'Get more info about SSML tags in https://docs.aws.amazon.com/us_us/polly/latest/dg/supportedtags.html#lang-tag';\n\nfunction ButtonTagger({ onClick, tag, closeTag = null, label = null }) {\n  return (\n    <button onClick={() => onClick(tag, closeTag)}>\n      {label || tag}\n    </button>\n  );\n};\n\nconst buttonsCollection = [\n  { label: '(s)peak', tag: 'speak', hotkeys: ['command+s', 'alt+s'] },\n  { label: '(e)mphasis', tag: 'emphasis', hotkeys: ['command+e', 'alt+e'] },\n  { label: '(p)', tag: 'p', hotkeys: ['command+p', 'alt+p'] },\n  { label: 'brea(k)', tag: 'break', hotkeys: ['command+k', 'alt+k'] },\n  {\n    label: 'auto-(b)reaths',\n    tag: 'amazon:auto-breaths volume=\"x-soft\" frequency=\"x-low\" duration=\"x-short\"',\n    closeTag: 'amazon:auto-breaths',\n    hotkeys: ['command+b', 'alt+b']\n  },\n  {\n    label: '(l)ang en-US',\n    tag: 'lang xml:lang=\"en-US\"',\n    closeTag: 'lang',\n    hotkeys: ['command+l', 'alt+l']\n  },\n  {\n    label: 'lang fr-FR',\n    tag: 'lang xml:lang=\"fr-FR\"',\n    closeTag: 'lang',\n    hotkeys: []\n  }\n];\n\nconst allHotkeys = buttonsCollection.map(e => e.hotkeys).flat().join(',');\n\nfunction App() {\n  const [editorContent, setEditorContent] = useState(localStorage.getItem(localStorageKey) || intro);\n  const editor = useRef(null);\n\n  const surroundWith = (text, tag, closeTag) => `<${tag}>${text}</${closeTag || tag}>`;\n\n  const surroundSelection = (tag, closeTag = null) => {\n    const cursorStart = editor.current.selectionStart;\n    const cursorEnd = editor.current.selectionEnd;\n\n    const leftText = editorContent.substring(0, cursorStart);\n    const middleText = editorContent.substring(cursorStart, cursorEnd);\n    const rightText = editorContent.substring(cursorEnd, editorContent.length);\n\n    setEditorContent(`${leftText}${surroundWith(middleText, tag, closeTag)}${rightText}`);\n  };\n\n  const handleTextareaChange = text => {\n    setEditorContent(text);\n    localStorage.setItem(localStorageKey, text);\n  }\n\n  const onKeyDown = (keyName, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { tag, closeTag } = buttonsCollection.filter(e => e.hotkeys.includes(keyName))[0];\n    surroundSelection(tag, closeTag);\n  }\n\n  const onKeyUp = (_, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div className='App'>\n      <h3>SSML Editor</h3>\n      <Hotkeys\n        keyName={allHotkeys}\n        onKeyDown={onKeyDown.bind(this)}\n        onKeyUp={onKeyUp.bind(this)}\n        allowRepeat={true}\n        filter={(e) => e.target.type === 'textarea'}\n      >\n        <textarea\n          ref={editor}\n          value={editorContent}\n          onChange={e => handleTextareaChange(e.target.value)}\n          rows={15}\n          style={{\n            width: '90%',\n            height: '90%',\n          }}\n        >\n        </textarea>\n      </Hotkeys>\n      <hr />\n      {buttonsCollection.map((e, i) => <ButtonTagger\n        key={i}\n        onClick={surroundSelection}\n        label={e.label || e.tag}\n        tag={e.tag}\n        closeTag={e.closeTag}\n      />)}\n      <p>hotkeys: cmd / alt + (Mod)</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}